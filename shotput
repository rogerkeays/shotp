#!/bin/sh
#
# shotput: a portable shell script to generate TOTPs
#
# Usage: shotput [service]
#
# Generate an OTP for the given service. If [service] is not found, you will be
# prompted to provide a new secret key and an encryption password. Copy and
# paste the new credentials to the config file in this directory or
# $HOME/.config/shotput.conf
#
# Each service may use a different password.
# 
# Note: requires `oathtool >=2.6.6` and `openssl`.
#

CIPHER=aes-256-cbc
CONFIG=$(dirname $0)/shotput.keys
[ ! -f $CONFIG ] && CONFIG="$HOME/.config/shotput.keys"

#
# Prompt for a new secret key and password.
#
# $1 the name of the service
#
newkey() {
  SERVICE=$1
  echo -n "Enter a new base32 secret key for $SERVICE:"
  read SECRET
  echo -n "Enter TOTP algorithm (default SHA1):"
  read ALGORITHM
  [ $ALGORITHM ] && PARAMS=" $ALGORITHM"
  echo -n "Enter TOTP timeout (default 30s):"
  read TIMEOUT
  [ $TIMEOUT ] && PARAMS=" ${ALGORITHM:=sha1} $TIMEOUT"

  # encrypt the new secret and write to the config file
  KEY=$(echo $SECRET | openssl enc -e -$CIPHER -pbkdf2 -base64 -A -in /dev/stdin)
  if [ $? -ne 0 ]; then
    echo "Something went wrong: $KEY"
    exit 1
  fi
  PARAMS="$KEY$PARAMS"
  echo $SERVICE=\"$PARAMS\" >> $CONFIG
  echo "Encrypted secret key for $SERVICE and added to $CONFIG\n"
}


#
# Decrypt a secret key and generate a totp.
#
# $1 the encrypted secret key
# $2 totp algorithm (default SHA1)
# $3 totp timeout in seconds (default 30)
#
totp() {
  echo $1 | \
    openssl enc -d -$CIPHER -pbkdf2 -base64 -in /dev/stdin | \
    oathtool --base32 --totp=${2:-sha1} --time-step-size=${3:-30s} -
}


# read the parameters from the config file
. $CONFIG
SERVICE=$1
PARAMS=$(eval echo \$$SERVICE)

# generate a totp
[ ! "$PARAMS" ] && newkey $SERVICE
totp $PARAMS

